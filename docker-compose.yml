version: "3.2"

services:

  functions:
    image: functions-app:v2.0.0
    build:
      context: ./
      dockerfile: docker/functions/Dockerfile
    # environment:
    #   - languageWorkers__node__arguments=--inspect=0.0.0.0:5858
    env_file:
      - .env
    working_dir: /usr/src/app
    ports:
      - "7071:7071"
      - "5858:5858"
    networks:
      - io-fn
    depends_on:
      - azurite
      - functions-node-18
    volumes:
      - .:/usr/src/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.functions.rule=Host(`localhost`)"
      - "traefik.http.routers.functions.entrypoints=web"
      - "traefik.http.services.functions.loadbalancer.server.port=7071"

      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-id=unused"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-groups=${REQ_USER_GROUPS}"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-subscription-id=${REQ_SERVICE_ID}"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-email=unused@example.com"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-note=unused"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-functions-key=unused"

      # apply middleware to route
      - "traefik.http.routers.functions.middlewares=testHeader"

  functions-node-18:
    image: functions-node-18
    build:
      context: ./
      dockerfile: docker/functions-node-18/Dockerfile
    command: /bin/true

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    hostname: azurite
    restart: always
    command: "azurite --blobHost 127.0.0.1 --blobPort 10000 --queueHost 127.0.0.1 --queuePort 10001 --tableHost 127.0.0.1 --tablePort 10002"
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    networks:
      - io-fn

  cosmosdb:
    image: cosmosdb
    container_name: cosmosdb
    env_file:
      - .env
    build:
      context: ./
      dockerfile: docker/cosmosdb/Dockerfile
    ports:
      - ${COSMOSDB_PORT}:3000
    networks:
      - io-fn

  fixtures:
    image: fixtures
    env_file:
      - .env
    build:
      context: ./
      dockerfile: docker/fixtures/Dockerfile
    depends_on:
      - cosmosdb
    networks:
      - io-fn

  traefik:
    image: traefik:v2.0
    command: |-
      --entrypoints.web.address=:80
      --providers.docker=true
      --providers.docker.network=io-fn
      --log.level=ERROR
    env_file:
      - .env
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    networks:
      - io-fn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  io-fn:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
